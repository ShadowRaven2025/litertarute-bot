# literature_bot.py - —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è Python 3.13
import logging
import random
import json
import os
from typing import Dict, Any, List
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TELEGRAM_BOT_TOKEN = "8421692900:AAH8-5L37_6SeNYKQ_RwsUJbva-kV71F8QU"

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–∏–≥ (10 –∫–Ω–∏–≥)
BOOKS_DATABASE = [
    {
        "id": 1,
        "title": "–•–æ–±–±–∏—Ç, –∏–ª–∏ –¢—É–¥–∞ –∏ –æ–±—Ä–∞—Ç–Ω–æ",
        "author": "–î–∂. –†. –†. –¢–æ–ª–∫–∏–Ω",
        "genres": ["–§—ç–Ω—Ç–µ–∑–∏", "–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è"],
        "description": "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –∏—Å—Ç–æ—Ä–∏—è –æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–∏ –ë–∏–ª—å–±–æ –ë—ç–≥–≥–∏–Ω—Å–∞."
    },
    {
        "id": 2,
        "title": "–ú–∞—Å—Ç–µ—Ä –∏ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞",
        "author": "–ú–∏—Ö–∞–∏–ª –ë—É–ª–≥–∞–∫–æ–≤",
        "genres": ["–ö–ª–∞—Å—Å–∏–∫–∞", "–ú–∏—Å—Ç–∏–∫–∞", "–°–∞—Ç–∏—Ä–∞"],
        "description": "–ú–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Ä–æ–º–∞–Ω –æ –≤–∏–∑–∏—Ç–µ –¥—å—è–≤–æ–ª–∞ –≤ –ú–æ—Å–∫–≤—É 1930-—Ö –≥–æ–¥–æ–≤."
    },
    {
        "id": 3,
        "title": "1984",
        "author": "–î–∂–æ—Ä–¥–∂ –û—Ä—É—ç–ª–ª",
        "genres": ["–ê–Ω—Ç–∏—É—Ç–æ–ø–∏—è", "–ù–∞—É—á–Ω–∞—è —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞"],
        "description": "–†–æ–º–∞–Ω-–∞–Ω—Ç–∏—É—Ç–æ–ø–∏—è –æ —Ç–æ—Ç–∞–ª–∏—Ç–∞—Ä–Ω–æ–º –æ–±—â–µ—Å—Ç–≤–µ –ø–æ–¥ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º –∫–æ–Ω—Ç—Ä–æ–ª–µ–º."
    },
    {
        "id": 4,
        "title": "–ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä –∏ —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–π –∫–∞–º–µ–Ω—å",
        "author": "–î–∂–æ–∞–Ω –†–æ—É–ª–∏–Ω–≥",
        "genres": ["–§—ç–Ω—Ç–µ–∑–∏", "–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è"],
        "description": "–ü–µ—Ä–≤–∞—è –∫–Ω–∏–≥–∞ –æ —é–Ω–æ–º –≤–æ–ª—à–µ–±–Ω–∏–∫–µ –ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä–µ."
    },
    {
        "id": 5,
        "title": "–ü—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –∏ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ",
        "author": "–§—ë–¥–æ—Ä –î–æ—Å—Ç–æ–µ–≤—Å–∫–∏–π",
        "genres": ["–ö–ª–∞—Å—Å–∏–∫–∞", "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä–æ–º–∞–Ω"],
        "description": "–ò—Å—Ç–æ—Ä–∏—è –±—ã–≤—à–µ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ –†–æ–¥–∏–æ–Ω–∞ –†–∞—Å–∫–æ–ª—å–Ω–∏–∫–æ–≤–∞."
    },
    {
        "id": 6,
        "title": "–í–ª–∞—Å—Ç–µ–ª–∏–Ω –∫–æ–ª–µ—Ü: –ë—Ä–∞—Ç—Å—Ç–≤–æ –∫–æ–ª—å—Ü–∞",
        "author": "–î–∂. –†. –†. –¢–æ–ª–∫–∏–Ω",
        "genres": ["–§—ç–Ω—Ç–µ–∑–∏", "–≠–ø–∏—á–µ—Å–∫–æ–µ"],
        "description": "–≠–ø–∏—á–µ—Å–∫–∞—è –∏—Å—Ç–æ—Ä–∏—è –æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–∏ –§—Ä–æ–¥–æ –ë—ç–≥–≥–∏–Ω—Å–∞."
    },
    {
        "id": 7,
        "title": "–¢—Ä–∏ —Ç–æ–≤–∞—Ä–∏—â–∞",
        "author": "–≠—Ä–∏—Ö –ú–∞—Ä–∏—è –†–µ–º–∞—Ä–∫",
        "genres": ["–ö–ª–∞—Å—Å–∏–∫–∞", "–†–æ–º–∞–Ω"],
        "description": "–ò—Å—Ç–æ—Ä–∏—è –æ –¥—Ä—É–∂–±–µ –∏ –ª—é–±–≤–∏ –≤ –ø–æ—Å–ª–µ–≤–æ–µ–Ω–Ω–æ–π –ì–µ—Ä–º–∞–Ω–∏–∏."
    },
    {
        "id": 8,
        "title": "–£–±–∏—Ç—å –ø–µ—Ä–µ—Å–º–µ—à–Ω–∏–∫–∞",
        "author": "–•–∞—Ä–ø–µ—Ä –õ–∏",
        "genres": ["–ö–ª–∞—Å—Å–∏–∫–∞", "–î—Ä–∞–º–∞"],
        "description": "–ü—Ä–æ–Ω–∑–∏—Ç–µ–ª—å–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –æ –≤–∑—Ä–æ—Å–ª–µ–Ω–∏–∏ –∏ –Ω–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤–µ."
    },
    {
        "id": 9,
        "title": "–ê–Ω–Ω–∞ –ö–∞—Ä–µ–Ω–∏–Ω–∞",
        "author": "–õ–µ–≤ –¢–æ–ª—Å—Ç–æ–π",
        "genres": ["–ö–ª–∞—Å—Å–∏–∫–∞", "–†–æ–º–∞–Ω"],
        "description": "–¢—Ä–∞–≥–∏—á–µ—Å–∫–∞—è –∏—Å—Ç–æ—Ä–∏—è –ª—é–±–≤–∏ –∑–∞–º—É–∂–Ω–µ–π –∂–µ–Ω—â–∏–Ω—ã."
    },
    {
        "id": 10,
        "title": "–ú–∞–ª–µ–Ω—å–∫–∏–π –ø—Ä–∏–Ω—Ü",
        "author": "–ê–Ω—Ç—É–∞–Ω –¥–µ –°–µ–Ω—Ç-–≠–∫–∑—é–ø–µ—Ä–∏",
        "genres": ["–§–∏–ª–æ—Å–æ—Ñ–∏—è", "–ü—Ä–∏—Ç—á–∞"],
        "description": "–§–∏–ª–æ—Å–æ—Ñ—Å–∫–∞—è –ø—Ä–∏—Ç—á–∞ –æ –º–∞–ª–µ–Ω—å–∫–æ–º –º–∞–ª—å—á–∏–∫–µ —Å –∞—Å—Ç–µ—Ä–æ–∏–¥–∞."
    }
]

# –ú–µ–Ω–µ–¥–∂–µ—Ä –ª–∞–π–∫–æ–≤
class LikeManager:
    def __init__(self, filename: str = "likes.json"):
        self.filename = filename
        self.likes_data = self._load_likes()
    
    def _load_likes(self) -> Dict[int, int]:
        try:
            if os.path.exists(self.filename):
                with open(self.filename, 'r', encoding='utf-8') as f:
                    return json.load(f)
            return {}
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∞–π–∫–æ–≤: {e}")
            return {}
    
    def _save_likes(self):
        try:
            with open(self.filename, 'w', encoding='utf-8') as f:
                json.dump(self.likes_data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–∞–π–∫–æ–≤: {e}")
    
    def get_likes(self, book_id: int) -> int:
        return self.likes_data.get(str(book_id), 0)
    
    def add_like(self, book_id: int):
        book_id_str = str(book_id)
        current_likes = self.likes_data.get(book_id_str, 0)
        self.likes_data[book_id_str] = current_likes + 1
        self._save_likes()
        logger.info(f"–õ–∞–π–∫ –∫–Ω–∏–≥–µ {book_id}. –í—Å–µ–≥–æ: {current_likes + 1}")
    
    def get_top_books(self, books_db: List[Dict], limit: int = 5) -> List[Dict]:
        books_with_likes = []
        for book in books_db:
            likes = self.get_likes(book["id"])
            books_with_likes.append({**book, "total_likes": likes})
        
        books_with_likes.sort(key=lambda x: x["total_likes"], reverse=True)
        return books_with_likes[:limit]

# –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –±–æ—Ç–∞
class BookBot:
    def __init__(self):
        self.like_manager = LikeManager()
        self.user_states: Dict[int, Dict[str, Any]] = {}
        self.user_info: Dict[int, Dict[str, str]] = {}
        self.last_recommendations: Dict[int, Dict] = {}
    
    def get_available_genres(self) -> str:
        all_genres = set()
        for book in BOOKS_DATABASE:
            all_genres.update(book["genres"])
        return ", ".join(sorted(all_genres))
    
    def handle_start(self, user_id: int, user_name: str = "") -> str:
        self.user_states[user_id] = {"step": "start"}
        self.user_info[user_id] = {"name": user_name or "–¥—Ä—É–≥"}
        return (
            "üìö *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω—ã–π –ì—É—Ä–º–∞–Ω!*\n\n"
            f"–í –º–æ–µ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–µ *{len(BOOKS_DATABASE)}* –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–Ω–∏–≥!\n\n"
            "*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
            "/recommend - –ø–æ–¥–æ–±—Ä–∞—Ç—å –∫–Ω–∏–≥—É\n"
            "/like - –ø–æ—Å—Ç–∞–≤–∏—Ç—å –ª–∞–π–∫ —Ç–µ–∫—É—â–µ–π –∫–Ω–∏–≥–µ\n"
            "/top - —Ç–æ–ø –∫–Ω–∏–≥ –ø–æ –ª–∞–π–∫–∞–º\n"
            "/books - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–Ω–∏–≥\n"
            "/genres - –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∂–∞–Ω—Ä—ã\n"
            "/help - –ø–æ–º–æ—â—å\n\n"
            "–ù–∞–ø–∏—à–∏ */recommend* —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!"
        )
    
    def handle_recommend(self, user_id: int) -> str:
        self.user_states[user_id] = {"step": "asking_genre"}
        user_name = self.user_info.get(user_id, {}).get("name", "–¥—Ä—É–≥")
        return (
            f"–û—Ç–ª–∏—á–Ω–æ, {user_name}! –î–∞–≤–∞–π –ø–æ–¥–±–µ—Ä–µ–º –∫–Ω–∏–≥—É.\n\n"
            "–ù–∞–ø–∏—à–∏ *–æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ* –ª—é–±–∏–º—ã—Ö –∂–∞–Ω—Ä–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: *–§—ç–Ω—Ç–µ–∑–∏, –ö–ª–∞—Å—Å–∏–∫–∞, –î–µ—Ç–µ–∫—Ç–∏–≤*\n\n"
            f"*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∂–∞–Ω—Ä—ã:* {self.get_available_genres()}"
        )
    
    def handle_like(self, user_id: int) -> str:
        if user_id not in self.last_recommendations:
            return "‚ùå –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –∫–Ω–∏–≥–∏ —Å –ø–æ–º–æ—â—å—é /recommend!"
        
        last_book = self.last_recommendations[user_id]
        book_id = last_book["id"]
        book_title = last_book["title"]
        
        self.like_manager.add_like(book_id)
        current_likes = self.like_manager.get_likes(book_id)
        
        return (
            f"‚ù§Ô∏è *–û—Ç–ª–∏—á–Ω–æ!* –¢—ã –ø–æ—Å—Ç–∞–≤–∏–ª(–∞) –ª–∞–π–∫ –∫–Ω–∏–≥–µ:\n"
            f"*{book_title}*\n\n"
            f"–¢–µ–ø–µ—Ä—å —É —ç—Ç–æ–π –∫–Ω–∏–≥–∏ *{current_likes}* –ª–∞–π–∫–æ–≤!\n\n"
            f"–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–ø –∫–Ω–∏–≥: /top"
        )
    
    def handle_top(self, user_id: int) -> str:
        top_books = self.like_manager.get_top_books(BOOKS_DATABASE, 5)
        
        if not top_books or all(book["total_likes"] == 0 for book in top_books):
            return "üìä –ü–æ–∫–∞ –Ω–µ—Ç –ª–∞–π–∫–æ–≤. –ë—É–¥—å –ø–µ—Ä–≤—ã–º, –∫—Ç–æ –ø–æ—Å—Ç–∞–≤–∏—Ç –ª–∞–π–∫! ‚ù§Ô∏è"
        
        response = "üèÜ *–¢–æ–ø –∫–Ω–∏–≥ –ø–æ –ª–∞–π–∫–∞–º:*\n\n"
        
        for i, book in enumerate(top_books, 1):
            likes = book["total_likes"]
            emoji = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else "üìö"
            response += f"{emoji} *{book['title']}* - {book['author']}\n"
            response += f"   ‚ù§Ô∏è {likes} –ª–∞–π–∫–æ–≤ | üè∑Ô∏è {', '.join(book['genres'])}\n\n"
        
        return response + "_–ü–æ—Å—Ç–∞–≤—å –ª–∞–π–∫ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–µ–π—Å—è –∫–Ω–∏–≥–µ —Å –ø–æ–º–æ—â—å—é /like_"
    
    def handle_books(self, user_id: int) -> str:
        response = f"üìñ *–í—Å–µ –∫–Ω–∏–≥–∏ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ ({len(BOOKS_DATABASE)}):*\n\n"
        for i, book in enumerate(BOOKS_DATABASE, 1):
            likes = self.like_manager.get_likes(book["id"])
            likes_text = f" ‚ù§Ô∏è {likes}" if likes > 0 else ""
            response += f"{i}. *{book['title']}* - {book['author']}{likes_text}\n"
            response += f"   üè∑Ô∏è {', '.join(book['genres'])}\n\n"
        return response
    
    def handle_genres(self, user_id: int) -> str:
        return f"üè∑Ô∏è *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∂–∞–Ω—Ä—ã:*\n\n{self.get_available_genres()}\n\n–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /recommend –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ –∫–Ω–∏–≥–∏!"
    
    def handle_help(self, user_id: int) -> str:
        return (
            "*üìö –õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω—ã–π –ì—É—Ä–º–∞–Ω - –ü–æ–º–æ—â—å*\n\n"
            "*–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:*\n"
            "1. /recommend - –ø–æ–¥–æ–±—Ä–∞—Ç—å –∫–Ω–∏–≥—É –ø–æ –∂–∞–Ω—Ä—É\n"
            "2. /like - –ø–æ—Å—Ç–∞–≤–∏—Ç—å –ª–∞–π–∫ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–µ–π—Å—è –∫–Ω–∏–≥–µ\n"
            "3. /top - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–Ω–∏–≥–∏\n\n"
            "*–í—Å–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
            "/start - –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥\n"
            "/recommend - –ø–æ–¥–æ–±—Ä–∞—Ç—å –∫–Ω–∏–≥—É\n"
            "/like - –ø–æ—Å—Ç–∞–≤–∏—Ç—å –ª–∞–π–∫\n"
            "/top - —Ç–æ–ø –∫–Ω–∏–≥\n"
            "/books - —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥\n"
            "/genres - –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∂–∞–Ω—Ä—ã\n"
            "/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
            f"*–í –±–∏–±–ª–∏–æ—Ç–µ–∫–µ:* {len(BOOKS_DATABASE)} –∫–Ω–∏–≥"
        )
    
    def handle_message(self, user_id: int, user_input: str, user_name: str = "") -> str:
        user_input_lower = user_input.lower().strip()
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
        commands = {
            "/start": self.handle_start,
            "/recommend": self.handle_recommend,
            "/like": self.handle_like,
            "/top": self.handle_top,
            "/books": self.handle_books,
            "/genres": self.handle_genres,
            "/help": self.handle_help
        }
        
        for cmd, handler in commands.items():
            if user_input_lower in [cmd, cmd[1:], self._get_russian_command(cmd)]:
                return handler(user_id)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_name and user_id not in self.user_info:
            self.user_info[user_id] = {"name": user_name}
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∞–ª–æ–≥–∞
        user_state = self.user_states.get(user_id, {"step": "start"})
        
        if user_state["step"] == "asking_genre":
            return self._process_genre_selection(user_id, user_input, user_state)
        
        return self._get_unknown_command_response()
    
    def _get_russian_command(self, command: str) -> str:
        russian_commands = {
            "/start": "—Å—Ç–∞—Ä—Ç",
            "/recommend": "—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å",
            "/like": "–ª–∞–π–∫", 
            "/top": "—Ç–æ–ø",
            "/books": "–∫–Ω–∏–≥–∏",
            "/genres": "–∂–∞–Ω—Ä—ã",
            "/help": "–ø–æ–º–æ—â—å"
        }
        return russian_commands.get(command, command[1:])
    
    def _process_genre_selection(self, user_id: int, user_input: str, user_state: Dict[str, Any]) -> str:
        genres = [genre.strip() for genre in user_input.split(",")]
        user_state["preferred_genres"] = genres
        user_state["step"] = "done"
        
        # –ü–æ–¥–±–æ—Ä –∫–Ω–∏–≥–∏
        filtered_books = []
        for book in BOOKS_DATABASE:
            book_genres_lower = [g.lower() for g in book["genres"]]
            user_genres_lower = [g.lower() for g in genres]
            if any(genre in book_genres_lower for genre in user_genres_lower):
                filtered_books.append(book)
        
        if not filtered_books:
            filtered_books = BOOKS_DATABASE
            message = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ—Ç –∫–Ω–∏–≥ –≤ —ç—Ç–∏—Ö –∂–∞–Ω—Ä–∞—Ö. –í–æ—Ç —Å–ª—É—á–∞–π–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:\n\n"
        else:
            message = "–í–æ—Ç —á—Ç–æ —è –ø–æ–¥–æ–±—Ä–∞–ª –¥–ª—è —Ç–µ–±—è:\n\n"
        
        selected_book = random.choice(filtered_books)
        self.last_recommendations[user_id] = selected_book
        
        likes_count = self.like_manager.get_likes(selected_book["id"])
        likes_info = f"‚ù§Ô∏è {likes_count} –ª–∞–π–∫–æ–≤" if likes_count > 0 else "–ë—É–¥—å –ø–µ—Ä–≤—ã–º, –∫—Ç–æ –ø–æ—Å—Ç–∞–≤–∏—Ç –ª–∞–π–∫! ‚ù§Ô∏è"
        
        user_name = self.user_info.get(user_id, {}).get("name", "–¥—Ä—É–≥")
        
        return (
            f"{message}"
            f"üìñ *{selected_book['title']}*\n"
            f"‚úçÔ∏è *–ê–≤—Ç–æ—Ä:* {selected_book['author']}\n"
            f"üè∑Ô∏è *–ñ–∞–Ω—Ä—ã:* {', '.join(selected_book['genres'])}\n"
            f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {selected_book['description']}\n"
            f"‚≠ê *–ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å:* {likes_info}\n\n"
            f"–ü—Ä–∏—è—Ç–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è, {user_name}! üìö\n\n"
            "*–ß—Ç–æ –¥–∞–ª—å—à–µ?*\n"
            "‚Ä¢ /like - –ø–æ—Å—Ç–∞–≤–∏—Ç—å –ª–∞–π–∫ —ç—Ç–æ–π –∫–Ω–∏–≥–µ\n"
            "‚Ä¢ /top - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–ø –∫–Ω–∏–≥\n" 
            "‚Ä¢ /recommend - –Ω–æ–≤–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è"
        )
    
    def _get_unknown_command_response(self) -> str:
        return (
            "–Ø –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω–∏–º–∞—é. üòï\n\n"
            "*–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:*\n"
            "/recommend - –ø–æ–¥–æ–±—Ä–∞—Ç—å –∫–Ω–∏–≥—É\n"
            "/like - –ø–æ—Å—Ç–∞–≤–∏—Ç—å –ª–∞–π–∫\n" 
            "/top - —Ç–æ–ø –∫–Ω–∏–≥\n"
            "/books - —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥\n"
            "/help - –ø–æ–º–æ—â—å"
        )

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
book_bot = BookBot()

# Telegram –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –¥–ª—è –≤–µ—Ä—Å–∏–∏ 21.7)
async def start_command(update, context):
    user_id = update.effective_user.id
    user_name = update.effective_user.first_name or ""
    response = book_bot.handle_start(user_id, user_name)
    await update.message.reply_text(response, parse_mode='Markdown')

async def recommend_command(update, context):
    user_id = update.effective_user.id
    response = book_bot.handle_recommend(user_id)
    await update.message.reply_text(response, parse_mode='Markdown')

async def like_command(update, context):
    user_id = update.effective_user.id
    response = book_bot.handle_like(user_id)
    await update.message.reply_text(response, parse_mode='Markdown')

async def top_command(update, context):
    user_id = update.effective_user.id
    response = book_bot.handle_top(user_id)
    await update.message.reply_text(response, parse_mode='Markdown')

async def books_command(update, context):
    user_id = update.effective_user.id
    response = book_bot.handle_books(user_id)
    await update.message.reply_text(response, parse_mode='Markdown')

async def genres_command(update, context):
    user_id = update.effective_user.id
    response = book_bot.handle_genres(user_id)
    await update.message.reply_text(response, parse_mode='Markdown')

async def help_command(update, context):
    user_id = update.effective_user.id
    response = book_bot.handle_help(user_id)
    await update.message.reply_text(response, parse_mode='Markdown')

async def handle_user_message(update, context):
    user_id = update.effective_user.id
    user_input = update.message.text
    user_name = update.effective_user.first_name or ""
    response = book_bot.handle_message(user_id, user_input, user_name)
    await update.message.reply_text(response, parse_mode='Markdown')

async def main():
    print("üöÄ –ó–∞–ø—É—Å–∫ –õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω–æ–≥–æ –ì—É—Ä–º–∞–Ω–∞ –Ω–∞ Render.com...")
    print(f"üìö –í –±–∏–±–ª–∏–æ—Ç–µ–∫–µ: {len(BOOKS_DATABASE)} –∫–Ω–∏–≥")
    print("‚úÖ –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    
    try:
        from telegram.ext import Application, CommandHandler, MessageHandler, filters
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        handlers = [
            CommandHandler("start", start_command),
            CommandHandler("recommend", recommend_command),
            CommandHandler("like", like_command),
            CommandHandler("top", top_command),
            CommandHandler("books", books_command),
            CommandHandler("genres", genres_command),
            CommandHandler("help", help_command),
            MessageHandler(filters.TEXT & ~filters.COMMAND, handle_user_message)
        ]
        
        for handler in handlers:
            application.add_handler(handler)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        print("üîç –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
        await application.run_polling()
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise

if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    try:
        from telegram.ext import Application, CommandHandler, MessageHandler, filters
        print("‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:")
        print("pip install python-telegram-bot==21.7")
        exit(1)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    asyncio.run(main())
