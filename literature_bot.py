import logging
import random
import asyncio
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TELEGRAM_BOT_TOKEN = "8421692900:AAH8-5L37_6SeNYKQ_RwsUJbva-kV71F8QU"

# –ë–∞–∑–∞ –∫–Ω–∏–≥
BOOKS_DATABASE = [
    {
        "id": 1,
        "title": "–•–æ–±–±–∏—Ç, –∏–ª–∏ –¢—É–¥–∞ –∏ –æ–±—Ä–∞—Ç–Ω–æ",
        "author": "–î–∂. –†. –†. –¢–æ–ª–∫–∏–Ω", 
        "genres": ["–§—ç–Ω—Ç–µ–∑–∏", "–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è"],
        "description": "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –∏—Å—Ç–æ—Ä–∏—è –æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–∏ –ë–∏–ª—å–±–æ –ë—ç–≥–≥–∏–Ω—Å–∞."
    },
    {
        "id": 2,
        "title": "–ú–∞—Å—Ç–µ—Ä –∏ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞",
        "author": "–ú–∏—Ö–∞–∏–ª –ë—É–ª–≥–∞–∫–æ–≤",
        "genres": ["–ö–ª–∞—Å—Å–∏–∫–∞", "–ú–∏—Å—Ç–∏–∫–∞", "–°–∞—Ç–∏—Ä–∞"],
        "description": "–ú–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Ä–æ–º–∞–Ω –æ –≤–∏–∑–∏—Ç–µ –¥—å—è–≤–æ–ª–∞ –≤ –ú–æ—Å–∫–≤—É 1930-—Ö –≥–æ–¥–æ–≤."
    },
    {
        "id": 3, 
        "title": "1984",
        "author": "–î–∂–æ—Ä–¥–∂ –û—Ä—É—ç–ª–ª",
        "genres": ["–ê–Ω—Ç–∏—É—Ç–æ–ø–∏—è", "–ù–∞—É—á–Ω–∞—è —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞"],
        "description": "–†–æ–º–∞–Ω-–∞–Ω—Ç–∏—É—Ç–æ–ø–∏—è –æ —Ç–æ—Ç–∞–ª–∏—Ç–∞—Ä–Ω–æ–º –æ–±—â–µ—Å—Ç–≤–µ –ø–æ–¥ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º –∫–æ–Ω—Ç—Ä–æ–ª–µ–º."
    },
    {
        "id": 4,
        "title": "–ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä –∏ —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–π –∫–∞–º–µ–Ω—å", 
        "author": "–î–∂–æ–∞–Ω –†–æ—É–ª–∏–Ω–≥",
        "genres": ["–§—ç–Ω—Ç–µ–∑–∏", "–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è"],
        "description": "–ü–µ—Ä–≤–∞—è –∫–Ω–∏–≥–∞ –æ —é–Ω–æ–º –≤–æ–ª—à–µ–±–Ω–∏–∫–µ –ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä–µ."
    },
    {
        "id": 5,
        "title": "–ü—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –∏ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ",
        "author": "–§—ë–¥–æ—Ä –î–æ—Å—Ç–æ–µ–≤—Å–∫–∏–π",
        "genres": ["–ö–ª–∞—Å—Å–∏–∫–∞", "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä–æ–º–∞–Ω"],
        "description": "–ò—Å—Ç–æ—Ä–∏—è –±—ã–≤—à–µ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ –†–æ–¥–∏–æ–Ω–∞ –†–∞—Å–∫–æ–ª—å–Ω–∏–∫–æ–≤–∞."
    }
]

class BookBot:
    def __init__(self):
        self.user_states = {}
        
    def handle_start(self, user_id: int, user_name: str = "") -> str:
        self.user_states[user_id] = {"step": "start"}
        return (
            "üìö *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω—ã–π –ì—É—Ä–º–∞–Ω!*\n\n"
            "–Ø –ø–æ–º–æ–≥—É –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ç–µ–±–µ –∫–Ω–∏–≥—É –¥–ª—è —á—Ç–µ–Ω–∏—è.\n\n"
            "*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
            "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n" 
            "/recommend - –ø–æ–¥–æ–±—Ä–∞—Ç—å –∫–Ω–∏–≥—É\n"
            "/books - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–Ω–∏–≥\n"
            "/help - –ø–æ–º–æ—â—å\n\n"
            "–ù–∞–ø–∏—à–∏ */recommend* —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!"
        )
    
    def handle_recommend(self, user_id: int) -> str:
        self.user_states[user_id] = {"step": "asking_genre"}
        return (
            "–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π –ø–æ–¥–±–µ—Ä–µ–º –∫–Ω–∏–≥—É.\n\n"
            "–ù–∞–ø–∏—à–∏ *–æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ* –∂–∞–Ω—Ä–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: *–§—ç–Ω—Ç–µ–∑–∏, –î–µ—Ç–µ–∫—Ç–∏–≤, –ö–ª–∞—Å—Å–∏–∫–∞*\n\n"
            "*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∂–∞–Ω—Ä—ã:* –§—ç–Ω—Ç–µ–∑–∏, –ö–ª–∞—Å—Å–∏–∫–∞, –ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è, –ù–∞—É—á–Ω–∞—è —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞, –ê–Ω—Ç–∏—É—Ç–æ–ø–∏—è, –ú–∏—Å—Ç–∏–∫–∞, –°–∞—Ç–∏—Ä–∞, –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä–æ–º–∞–Ω"
        )
    
    def handle_books(self, user_id: int) -> str:
        response = "üìñ *–í—Å–µ –∫–Ω–∏–≥–∏ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ:*\n\n"
        for i, book in enumerate(BOOKS_DATABASE, 1):
            response += f"{i}. *{book['title']}* - {book['author']}\n"
            response += f"   üè∑Ô∏è {', '.join(book['genres'])}\n\n"
        return response
    
    def handle_help(self, user_id: int) -> str:
        return (
            "*üìö –õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω—ã–π –ì—É—Ä–º–∞–Ω - –ü–æ–º–æ—â—å*\n\n"
            "*–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:*\n"
            "1. –ù–∞–ø–∏—à–∏ /recommend\n" 
            "2. –£–∫–∞–∂–∏ –ª—é–±–∏–º—ã–µ –∂–∞–Ω—Ä—ã\n"
            "3. –ü–æ–ª—É—á–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é!\n\n"
            "*–ö–æ–º–∞–Ω–¥—ã:*\n"
            "/start - –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥\n"
            "/recommend - –ø–æ–¥–æ–±—Ä–∞—Ç—å –∫–Ω–∏–≥—É\n" 
            "/books - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–Ω–∏–≥\n"
            "/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
            f"*–í –±–∏–±–ª–∏–æ—Ç–µ–∫–µ:* {len(BOOKS_DATABASE)} –∫–Ω–∏–≥"
        )
    
    def handle_message(self, user_id: int, user_input: str, user_name: str = "") -> str:
        user_input_lower = user_input.lower()
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
        if user_input_lower in ("/start", "start", "–Ω–∞—á–∞—Ç—å"):
            return self.handle_start(user_id, user_name)
        elif user_input_lower in ("/recommend", "recommend", "–ø–æ–¥–æ–±—Ä–∞—Ç—å"):
            return self.handle_recommend(user_id)
        elif user_input_lower in ("/books", "books", "–∫–Ω–∏–≥–∏"):
            return self.handle_books(user_id)
        elif user_input_lower in ("/help", "help", "–ø–æ–º–æ—â—å"):
            return self.handle_help(user_id)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∞–ª–æ–≥–∞
        user_state = self.user_states.get(user_id, {"step": "start"})
        
        if user_state["step"] == "asking_genre":
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∂–∞–Ω—Ä—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∫–Ω–∏–≥—É
            genres = [genre.strip() for genre in user_input.split(",")]
            user_state["genres"] = genres
            user_state["step"] = "done"
            
            # –ü–æ–¥–±–∏—Ä–∞–µ–º –∫–Ω–∏–≥—É
            filtered_books = []
            for book in BOOKS_DATABASE:
                book_genres_lower = [g.lower() for g in book["genres"]]
                user_genres_lower = [g.lower() for g in genres]
                if any(genre in book_genres_lower for genre in user_genres_lower):
                    filtered_books.append(book)
            
            if not filtered_books:
                filtered_books = BOOKS_DATABASE
                message = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ—Ç –∫–Ω–∏–≥ –≤ —ç—Ç–∏—Ö –∂–∞–Ω—Ä–∞—Ö. –í–æ—Ç —Å–ª—É—á–∞–π–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:\n\n"
            else:
                message = "–í–æ—Ç —á—Ç–æ —è –ø–æ–¥–æ–±—Ä–∞–ª –¥–ª—è —Ç–µ–±—è:\n\n"
            
            book = random.choice(filtered_books)
            
            return (
                f"{message}"
                f"üìñ *{book['title']}*\n"
                f"‚úçÔ∏è *–ê–≤—Ç–æ—Ä:* {book['author']}\n"
                f"üè∑Ô∏è *–ñ–∞–Ω—Ä—ã:* {', '.join(book['genres'])}\n"
                f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {book['description']}\n\n"
                "–ü—Ä–∏—è—Ç–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è! üìö\n\n"
                "–•–æ—á–µ—à—å –µ—â–µ –∫–Ω–∏–≥—É? –ù–∞–ø–∏—à–∏ */recommend*"
            )
        
        return (
            "–Ø –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω–∏–º–∞—é. üòï\n\n"
            "–ù–∞–ø–∏—à–∏ */recommend* —á—Ç–æ–±—ã –ø–æ–¥–æ–±—Ä–∞—Ç—å –∫–Ω–∏–≥—É\n"
            "–∏–ª–∏ */help* –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏."
        )

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
book_bot = BookBot()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è Telegram
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_name = update.effective_user.first_name or ""
    response = book_bot.handle_start(user_id, user_name)
    await update.message.reply_text(response, parse_mode='Markdown')

async def recommend_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    response = book_bot.handle_recommend(user_id)
    await update.message.reply_text(response, parse_mode='Markdown')

async def books_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    response = book_bot.handle_books(user_id)
    await update.message.reply_text(response, parse_mode='Markdown')

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    response = book_bot.handle_help(user_id)
    await update.message.reply_text(response, parse_mode='Markdown')

async def handle_user_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_input = update.message.text
    user_name = update.effective_user.first_name or ""
    response = book_bot.handle_message(user_id, user_input, user_name)
    await update.message.reply_text(response, parse_mode='Markdown')

async def main():
    print("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –Ω–∞ Render.com...")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("recommend", recommend_command))
    application.add_handler(CommandHandler("books", books_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_user_message))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Å polling
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è polling...")
    await application.run_polling()

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    asyncio.run(main())

