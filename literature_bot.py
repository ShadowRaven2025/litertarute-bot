# render_bot.py - –¥–ª—è Render.com
import logging
import os
import random
from flask import Flask, request
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_BOT_TOKEN = "8421692900:AAH8-5L37_6SeNYKQ_RwsUJbva-kV71F8QU"

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ URL
RENDER_EXTERNAL_URL = os.environ.get('RENDER_EXTERNAL_URL')
if RENDER_EXTERNAL_URL:
    WEBHOOK_URL = f"{RENDER_EXTERNAL_URL}/webhook"
else:
    # –ï—Å–ª–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
    WEBHOOK_URL = None

app = Flask(__name__)

# –ë–∞–∑–∞ –∫–Ω–∏–≥
BOOKS_DATABASE = [
    {
        "id": 1,
        "title": "–•–æ–±–±–∏—Ç, –∏–ª–∏ –¢—É–¥–∞ –∏ –æ–±—Ä–∞—Ç–Ω–æ",
        "author": "–î–∂. –†. –†. –¢–æ–ª–∫–∏–Ω", 
        "genres": ["–§—ç–Ω—Ç–µ–∑–∏", "–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è"],
        "description": "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –∏—Å—Ç–æ—Ä–∏—è –æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–∏ –ë–∏–ª—å–±–æ –ë—ç–≥–≥–∏–Ω—Å–∞."
    },
    {
        "id": 2,
        "title": "–ú–∞—Å—Ç–µ—Ä –∏ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞",
        "author": "–ú–∏—Ö–∞–∏–ª –ë—É–ª–≥–∞–∫–æ–≤",
        "genres": ["–ö–ª–∞—Å—Å–∏–∫–∞", "–ú–∏—Å—Ç–∏–∫–∞", "–°–∞—Ç–∏—Ä–∞"],
        "description": "–ú–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Ä–æ–º–∞–Ω –æ –≤–∏–∑–∏—Ç–µ –¥—å—è–≤–æ–ª–∞ –≤ –ú–æ—Å–∫–≤—É 1930-—Ö –≥–æ–¥–æ–≤."
    },
    {
        "id": 3, 
        "title": "1984",
        "author": "–î–∂–æ—Ä–¥–∂ –û—Ä—É—ç–ª–ª",
        "genres": ["–ê–Ω—Ç–∏—É—Ç–æ–ø–∏—è", "–ù–∞—É—á–Ω–∞—è —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞"],
        "description": "–†–æ–º–∞–Ω-–∞–Ω—Ç–∏—É—Ç–æ–ø–∏—è –æ —Ç–æ—Ç–∞–ª–∏—Ç–∞—Ä–Ω–æ–º –æ–±—â–µ—Å—Ç–≤–µ –ø–æ–¥ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º –∫–æ–Ω—Ç—Ä–æ–ª–µ–º."
    }
]

class BookBot:
    def __init__(self):
        self.user_states = {}
        
    def handle_start(self, user_id: int, user_name: str = "") -> str:
        self.user_states[user_id] = {"step": "start"}
        return (
            "üìö *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω—ã–π –ì—É—Ä–º–∞–Ω!*\n\n"
            "–Ø –ø–æ–º–æ–≥—É –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ç–µ–±–µ –∫–Ω–∏–≥—É –¥–ª—è —á—Ç–µ–Ω–∏—è.\n\n"
            "*–ö–æ–º–∞–Ω–¥—ã:*\n"
            "/start - –Ω–∞—á–∞—Ç—å\n" 
            "/recommend - –ø–æ–¥–æ–±—Ä–∞—Ç—å –∫–Ω–∏–≥—É\n"
            "/books - —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥\n"
            "/help - –ø–æ–º–æ—â—å"
        )
    
    def handle_recommend(self, user_id: int) -> str:
        book = random.choice(BOOKS_DATABASE)
        return (
            f"üìñ *{book['title']}*\n"
            f"‚úçÔ∏è *–ê–≤—Ç–æ—Ä:* {book['author']}\n"
            f"üè∑Ô∏è *–ñ–∞–Ω—Ä—ã:* {', '.join(book['genres'])}\n"
            f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {book['description']}\n\n"
            "–ü—Ä–∏—è—Ç–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è! üìö"
        )
    
    def handle_books(self, user_id: int) -> str:
        response = "üìñ *–í—Å–µ –∫–Ω–∏–≥–∏:*\n\n"
        for i, book in enumerate(BOOKS_DATABASE, 1):
            response += f"{i}. *{book['title']}* - {book['author']}\n"
        return response

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
book_bot = BookBot()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Telegram
application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_name = update.effective_user.first_name or ""
    response = book_bot.handle_start(user_id, user_name)
    await update.message.reply_text(response, parse_mode='Markdown')

async def recommend_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    response = book_bot.handle_recommend(user_id)
    await update.message.reply_text(response, parse_mode='Markdown')

async def books_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    response = book_bot.handle_books(user_id)
    await update.message.reply_text(response, parse_mode='Markdown')

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìö *–ü–æ–º–æ—â—å*\n\n"
        "/start - –Ω–∞—á–∞—Ç—å\n"
        "/recommend - —Å–ª—É—á–∞–π–Ω–∞—è –∫–Ω–∏–≥–∞\n"
        "/books - —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥",
        parse_mode='Markdown'
    )

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
application.add_handler(CommandHandler("start", start_command))
application.add_handler(CommandHandler("recommend", recommend_command))
application.add_handler(CommandHandler("books", books_command))
application.add_handler(CommandHandler("help", help_command))

@app.route('/webhook', methods=['POST'])
async def webhook():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞ –æ—Ç Telegram"""
    try:
        json_data = request.get_json()
        update = Update.de_json(json_data, application.bot)
        await application.process_update(update)
        return 'ok'
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –≤–µ–±—Ö—É–∫–µ: {e}")
        return 'error'

@app.route('/')
def home():
    return "üìö –ö–Ω–∏–∂–Ω—ã–π –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ Render.com!"

@app.route('/set_webhook')
def set_webhook():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞"""
    try:
        if WEBHOOK_URL:
            application.bot.set_webhook(WEBHOOK_URL)
            return f"‚úÖ –í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}"
        else:
            return "‚ùå WEBHOOK_URL –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞: {e}"

@app.route('/remove_webhook')
def remove_webhook():
    """–£–¥–∞–ª–µ–Ω–∏–µ –≤–µ–±—Ö—É–∫–∞"""
    try:
        application.bot.delete_webhook()
        return "‚úÖ –í–µ–±—Ö—É–∫ —É–¥–∞–ª–µ–Ω"
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤–µ–±—Ö—É–∫–∞: {e}"

def main():
    """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    port = int(os.environ.get('PORT', 10000))
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    if WEBHOOK_URL:
        logger.info(f"–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫: {WEBHOOK_URL}")
        application.bot.set_webhook(WEBHOOK_URL)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app.run(host='0.0.0.0', port=port, debug=False)

if __name__ == '__main__':
    main()

